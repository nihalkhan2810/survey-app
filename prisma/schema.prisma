// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  surveys   Survey[]
  responses Response[]

  @@map("users")
}

model Survey {
  id          String   @id @default(cuid())
  topic       String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Creator
  createdBy   String   @map("created_by")
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Relations
  questions   Question[]
  responses   Response[]
  reminders   Reminder[]

  @@map("surveys")
}

model Question {
  id        String      @id @default(cuid())
  text      String
  type      QuestionType
  options   String[]    // For multiple choice questions
  minValue  Int?        @map("min_value") // For rating questions
  maxValue  Int?        @map("max_value") // For rating questions
  order     Int         // Question order in survey
  createdAt DateTime    @default(now()) @map("created_at")

  // Survey relation
  surveyId  String      @map("survey_id")
  survey    Survey      @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  // Relations
  answers   Answer[]

  @@map("questions")
}

model Response {
  id          String   @id @default(cuid())
  submittedAt DateTime @default(now()) @map("submitted_at")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")

  // Survey relation
  surveyId    String   @map("survey_id")
  survey      Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  // User relation (optional - for authenticated responses)
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Relations
  answers     Answer[]

  @@map("responses")
}

model Answer {
  id         String   @id @default(cuid())
  textValue  String?  @map("text_value")    // For text answers
  numberValue Int?    @map("number_value")  // For rating answers
  choiceValues String[] @map("choice_values") // For multiple choice answers
  createdAt  DateTime @default(now()) @map("created_at")

  // Question relation
  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Response relation
  responseId String   @map("response_id")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Reminder {
  id          String      @id @default(cuid())
  type        ReminderType
  scheduledAt DateTime    @map("scheduled_at")
  sentAt      DateTime?   @map("sent_at")
  emailSubject String     @map("email_subject")
  emailBody   String      @map("email_body")
  recipients  String[]    // Email addresses
  createdAt   DateTime    @default(now()) @map("created_at")

  // Survey relation
  surveyId    String      @map("survey_id")
  survey      Survey      @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum QuestionType {
  TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
}

enum ReminderType {
  OPENING
  MIDPOINT
  CLOSING
}